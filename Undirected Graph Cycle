class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int V = adj.size();
        boolean visited[] = new boolean[V];
        Arrays.fill(visited,false);
        for(int i=0;i<V;i++){
            if(!visited[i]){
                boolean ans=checkForCycle(i,V,adj,visited);
                if(ans==true)
                return true;
            }
        }
        return false;
        
    }
    public boolean checkForCycle(int src,int V,ArrayList<ArrayList<Integer>> adj,boolean[] visited){
        Queue<Pair> q = new LinkedList<>();
        visited[src]=true;
        q.add(new Pair(src,-1));
        while(!q.isEmpty()){
            int node=q.peek().first;
        int parent= q.peek().second;
        q.remove();
        for(int adjnode: adj.get(node)){
            if(!visited[adjnode]){
                visited[adjnode]=true;
                q.add(new Pair(adjnode,node));
            }
            else if(parent!=adjnode){
                return true;
            }
            
        }
        }
        
    return false;    
    }
    
}
class Pair {
    int first;
    int second;
    public Pair(int first, int second) {
        this.first = first;
        this.second = second; 
    }
}
