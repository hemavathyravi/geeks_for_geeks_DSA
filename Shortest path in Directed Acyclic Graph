class Solution {

    public int[] shortestPath(int V, int E, int[][] edges) {
        // Code here
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<Pair>());
        }
        for(int i=0;i<E;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj.get(u).add(new Pair(v,wt));
        }
        int[] vis = new int[V];
        Stack<Integer> st = new Stack<>();
        for(int i=0;i<V;i++){
            if(vis[i]!=1){
                dfs(i,adj,vis,st);
            }
        }
        int[] dist = new int[V];
        for(int i=0;i<V;i++){
            dist[i]=(int)1e9;
        }
        dist[0]=0;
        while(!st.empty()){
            int nd = st.pop();
            for(int i=0;i<adj.get(nd).size();i++){
                int rch =adj.get(nd).get(i).v;
                int wet =adj.get(nd).get(i).wt;
                if(dist[nd]+wet<dist[rch]){
                    dist[rch]=dist[nd]+wet;
                }
            }
        }
        for(int i=0;i<V;i++){
            int y=(int)1e9;
            if(dist[i]==y)
            {
                dist[i]=-1;
            }
        }
        
        return dist;
    }
    public void dfs(int node,ArrayList<ArrayList<Pair>> adj,int[] vis,Stack<Integer> st){
        vis[node]=1;
        for(int adjnode=0;adjnode<adj.get(node).size();adjnode++){
            if(vis[adj.get(node).get(adjnode).v]!=1){
                int val=adj.get(node).get(adjnode).v;
                dfs(val,adj,vis,st);
            }
        }
        st.push(node);
    }
}
class Pair{
    int v,wt;
    Pair(int v,int wt){
        this.v=v;
        this.wt=wt;
    }
}
