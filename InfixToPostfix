class Solution {
    // Function to convert an infix expression to a postfix expression.
    public static String infixToPostfix(String s) {
        Stack<Character> st = new Stack<>();
        StringBuilder str = new StringBuilder();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            // If the character is an operand, add it to the output.
            if (Character.isLetterOrDigit(c)) {
                str.append(c);
            }
            // If the character is '(', push it onto the stack.
            else if (c == '(') {
                st.push(c);
            }
            // If the character is ')', pop and output from the stack until '(' is encountered.
            else if (c == ')') {
                while (!st.isEmpty() && st.peek() != '(') {
                    str.append(st.pop());
                }
                if (!st.isEmpty() && st.peek() == '(') {
                    st.pop();
                }
            }
            // An operator is encountered.
            else {
                while (!st.isEmpty() && priority(st.peek()) >= priority(c)) {
                    str.append(st.pop());
                }
                st.push(c);
            }
        }

        // Pop all the operators from the stack.
        while (!st.isEmpty()) {
            str.append(st.pop());
        }

        return str.toString();
    }

    // Function to return precedence of operators.
    public static int priority(char c) {
        if (c == '^') {
            return 3;
        } else if (c == '*' || c == '/') {
            return 2;
        } else if (c == '+' || c == '-') {
            return 1;
        }
        return -1;
    }
}
